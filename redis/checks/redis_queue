#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check written by Craig Cook  1 April 2015
# - version 1
# - version 1.1  Added factory_settings, changed params
# - version 1.2  14 April 2015  Craig Cook
#                   Added support for Average Queue Size over time
# - version 1.3  15 April 2015  Craig Cook
#                   Always report actual queue size for performance data
#                   Changed variable names to be more descriptive

# Example output from agent:
#<<<redis_queue>>>
#some-queue-name1 0
#some-queue-name2 0
#some-queue-name3 0

factory_settings["redis_queue_default_levels"] = {
    "warn_size"     : ( None ),
    "crit_size"     : ( None ),
    "queue_average" : ( None ),
}

def inventory_redis_queue(info):
    inventory = []
    for line in info:
       # line[0] is the name of the queue
       inventory.append( (line[0], {}) )
    return inventory

def check_redis_queue(item, params, info):

    now = time.time()

    for line in info:

        queue_name = line[0]

        if queue_name == item:

            queue_size                 = int(line[1])
            # Allow for a warn threshold but not require a critical threshold
            warn                       = params['warn_size']
            crit                       = params['crit_size']
            queue_avg_minute_threshold = params['queue_average']
            extended_perfdata          = False
            calculated_avg_queue_size  = None
            infotext                   = "Queue Length is %d, " % queue_size

            # If this is true, we have a retrieved an average threshold for the queue over time
            if queue_avg_minute_threshold is not None:
                timedif, calculated_avg_queue_size = get_average("redis_queue.%s.avg" % item, now, queue_size, queue_avg_minute_threshold, False)
                infotext += "%d min average: %.1f%% " % (queue_avg_minute_threshold, calculated_avg_queue_size)
                queue_size = calculated_avg_queue_size # use this for level comparison
                extended_perfdata = True

            # If we have a calculated_avg_queue_size use it to calcuate warning or critical threshold
            if crit is not None and queue_size >= crit:
                state = 2
            elif warn is not None and queue_size >= warn:
                state = 1
            else:
                state = 0

            # If this is true, calculated_avg_queue_size must have been used to calculate threshold
            # use actual queue length to report trending data
            if calculated_avg_queue_size is not None:
                queue_size = int(line[1])

            if state > 0:
                perfdata = [ ('redis_queue', queue_size, warn, crit) ]
            else:
                perfdata = [ ('redis_queue', queue_size) ]

            if  extended_perfdata:
                 perfdata.append(("redis_queue_avg", calculated_avg_queue_size, warn, crit))

            infotext += "(Levels Warn: %s, Crit: %s, Queue Avg: %s minutes), " % (warn, crit, queue_avg_minute_threshold)

            return (state, infotext, perfdata)
    return 2, "Queue not found"

check_info['redis_queue'] = {
    'check_function'          : check_redis_queue,
    'inventory_function'      : inventory_redis_queue,
    "default_levels_variable" : "redis_queue_default_levels",
    'service_description'     : 'REDIS Queue %s',
    'has_perfdata'            : True,
    'group'                   : 'redis_queue',
}
